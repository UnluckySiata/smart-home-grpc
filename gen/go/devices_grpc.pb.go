// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--dev
// source: devices.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SensorService_GetMeasurement_FullMethodName = "/devices.SensorService/GetMeasurement"
	SensorService_SetUnit_FullMethodName        = "/devices.SensorService/SetUnit"
)

// SensorServiceClient is the client API for SensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorServiceClient interface {
	GetMeasurement(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Measurement, error)
	SetUnit(ctx context.Context, in *UnitInfo, opts ...grpc.CallOption) (*Reply, error)
}

type sensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorServiceClient(cc grpc.ClientConnInterface) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) GetMeasurement(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Measurement, error) {
	out := new(Measurement)
	err := c.cc.Invoke(ctx, SensorService_GetMeasurement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorServiceClient) SetUnit(ctx context.Context, in *UnitInfo, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, SensorService_SetUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorServiceServer is the server API for SensorService service.
// All implementations must embed UnimplementedSensorServiceServer
// for forward compatibility
type SensorServiceServer interface {
	GetMeasurement(context.Context, *Sensor) (*Measurement, error)
	SetUnit(context.Context, *UnitInfo) (*Reply, error)
	mustEmbedUnimplementedSensorServiceServer()
}

// UnimplementedSensorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSensorServiceServer struct {
}

func (UnimplementedSensorServiceServer) GetMeasurement(context.Context, *Sensor) (*Measurement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasurement not implemented")
}
func (UnimplementedSensorServiceServer) SetUnit(context.Context, *UnitInfo) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUnit not implemented")
}
func (UnimplementedSensorServiceServer) mustEmbedUnimplementedSensorServiceServer() {}

// UnsafeSensorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorServiceServer will
// result in compilation errors.
type UnsafeSensorServiceServer interface {
	mustEmbedUnimplementedSensorServiceServer()
}

func RegisterSensorServiceServer(s grpc.ServiceRegistrar, srv SensorServiceServer) {
	s.RegisterService(&SensorService_ServiceDesc, srv)
}

func _SensorService_GetMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).GetMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorService_GetMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).GetMeasurement(ctx, req.(*Sensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorService_SetUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).SetUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SensorService_SetUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).SetUnit(ctx, req.(*UnitInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// SensorService_ServiceDesc is the grpc.ServiceDesc for SensorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "devices.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeasurement",
			Handler:    _SensorService_GetMeasurement_Handler,
		},
		{
			MethodName: "SetUnit",
			Handler:    _SensorService_SetUnit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "devices.proto",
}

const (
	SpeakerService_GetCurrentlyPlaying_FullMethodName = "/devices.SpeakerService/GetCurrentlyPlaying"
	SpeakerService_ApplySetting_FullMethodName        = "/devices.SpeakerService/ApplySetting"
)

// SpeakerServiceClient is the client API for SpeakerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeakerServiceClient interface {
	GetCurrentlyPlaying(ctx context.Context, in *Speaker, opts ...grpc.CallOption) (*Reply, error)
	ApplySetting(ctx context.Context, in *SpeakerSetting, opts ...grpc.CallOption) (*Reply, error)
}

type speakerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeakerServiceClient(cc grpc.ClientConnInterface) SpeakerServiceClient {
	return &speakerServiceClient{cc}
}

func (c *speakerServiceClient) GetCurrentlyPlaying(ctx context.Context, in *Speaker, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, SpeakerService_GetCurrentlyPlaying_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerServiceClient) ApplySetting(ctx context.Context, in *SpeakerSetting, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, SpeakerService_ApplySetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeakerServiceServer is the server API for SpeakerService service.
// All implementations must embed UnimplementedSpeakerServiceServer
// for forward compatibility
type SpeakerServiceServer interface {
	GetCurrentlyPlaying(context.Context, *Speaker) (*Reply, error)
	ApplySetting(context.Context, *SpeakerSetting) (*Reply, error)
	mustEmbedUnimplementedSpeakerServiceServer()
}

// UnimplementedSpeakerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpeakerServiceServer struct {
}

func (UnimplementedSpeakerServiceServer) GetCurrentlyPlaying(context.Context, *Speaker) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentlyPlaying not implemented")
}
func (UnimplementedSpeakerServiceServer) ApplySetting(context.Context, *SpeakerSetting) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplySetting not implemented")
}
func (UnimplementedSpeakerServiceServer) mustEmbedUnimplementedSpeakerServiceServer() {}

// UnsafeSpeakerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeakerServiceServer will
// result in compilation errors.
type UnsafeSpeakerServiceServer interface {
	mustEmbedUnimplementedSpeakerServiceServer()
}

func RegisterSpeakerServiceServer(s grpc.ServiceRegistrar, srv SpeakerServiceServer) {
	s.RegisterService(&SpeakerService_ServiceDesc, srv)
}

func _SpeakerService_GetCurrentlyPlaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Speaker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).GetCurrentlyPlaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerService_GetCurrentlyPlaying_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).GetCurrentlyPlaying(ctx, req.(*Speaker))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerService_ApplySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeakerSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServiceServer).ApplySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerService_ApplySetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServiceServer).ApplySetting(ctx, req.(*SpeakerSetting))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeakerService_ServiceDesc is the grpc.ServiceDesc for SpeakerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeakerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "devices.SpeakerService",
	HandlerType: (*SpeakerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentlyPlaying",
			Handler:    _SpeakerService_GetCurrentlyPlaying_Handler,
		},
		{
			MethodName: "ApplySetting",
			Handler:    _SpeakerService_ApplySetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "devices.proto",
}
