syntax = "proto3";

option go_package = "github.com/unluckysiata/smart-home-grpc/gen/go";

package devices;

// sensors
enum SensorType {
    TEMPERATURE = 0;
    PRESSURE = 1;
}

enum TemperatureUnit {
    CELCIUS = 0;
    FAHRENHEIT = 1;
}

enum PressureUnit {
    HPA = 0;
    BAR = 1;
}

message Sensor {
    uint32 id = 1;
    SensorType type = 2;
    double value = 3;
    oneof unit {
        TemperatureUnit temperatureUnit = 4;
        PressureUnit pressureUnit = 5;
    }
}

message Sensors {
    ReplyType replyType = 1;
    string msg = 2;
    repeated Sensor list = 3;
}

message UnitInfo {
    uint32 sensorId = 1;
    SensorType type = 2;
    oneof unit {
        TemperatureUnit temperatureUnit = 3;
        PressureUnit pressureUnit = 4;
    }
}

message Measurement {
    ReplyType replyType = 1;
    string msg = 2;
    double value = 3;
    SensorType type = 4;
    oneof unit {
        TemperatureUnit temperatureUnit = 5;
        PressureUnit pressureUnit = 6;
    }
}

// speaker
message Speaker {
    uint32 id = 1;
    string song = 2;
    uint32 volume = 3;
}

message Speakers {
    ReplyType replyType = 1;
    string msg = 2;
    repeated Speaker list = 3;
}

message SpeakerSetting {
    uint32 speakerId = 1;
    Type type = 2;

    oneof value {
        string text = 3;
        uint32 numeric = 4;
    }
    enum Type {
        VOLUME = 0;
        SONG = 1;
    }
}

// universal
message Reply {
    ReplyType type = 1;
    string msg = 2;
}

enum ReplyType {
    OK = 0;
    ERR = 1;
}

message Empty {}

// services
service SensorService {
    rpc GetMeasurement (Sensor) returns (Measurement) {}
    rpc SetUnit (UnitInfo) returns (Reply) {}
    rpc GetSensors (Empty) returns (Sensors) {}
}

service SpeakerService {
    rpc GetCurrentlyPlaying (Speaker) returns (Reply) {}
    rpc ApplySetting (SpeakerSetting) returns (Reply) {}
    rpc GetSpeakers (Empty) returns (Speakers) {}
}
